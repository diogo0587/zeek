# Operations corresponding to scripting idioms / known script functions.

internal-op MinU
types VVV VVC
eval	$$.uint_val = std::min($1.uint_val, $2.uint_val);

internal-op MinI
types VVV VVC
eval	$$.int_val = std::min($1.int_val, $2.int_val);

internal-op MinD
types VVV VVC
eval	$$.double_val = std::min($1.double_val, $2.double_val);

internal-op MaxU
types VVV VVC
eval	$$.uint_val = std::max($1.uint_val, $2.uint_val);

internal-op MaxI
types VVV VVC
eval	$$.int_val = std::max($1.int_val, $2.int_val);

internal-op MaxD
types VVV VVC
eval	$$.double_val = std::max($1.double_val, $2.double_val);

internal-op Func-Id-String
type VV
eval	auto id_rec = $1.record_val;
	auto orig_h = id_rec->RawField(0).addr_val->AsAddr().AsString();
	auto resp_h = id_rec->RawField(2).addr_val->AsAddr().AsString();
	auto orig_p = static_cast<uint32_t>(id_rec->RawField(1).uint_val) & ~PORT_SPACE_MASK;
	auto resp_p = static_cast<uint32_t>(id_rec->RawField(3).uint_val) & ~PORT_SPACE_MASK;
	/* Maximum address size is for IPv6 with no compression. Each
	 * 8 16-bit hex elements plus 7 colons between them plus the two []'s
	 * = 8*4 + 7 + 2 = 41 characters.
	 *
	 * Maximum port size is 5.
	 *
	 * Two of these = 2*41 + 2*5 = 92.
	 * Other delimiters: two ':', one ' < ' for 5 more.
	 *
	 * TOTAL: 97 characters.
	 *
	 * We use considerably more for safety.
	 */
	char buf[128];
	snprintf(buf, sizeof buf, "%s:%u > %s:%u", orig_h.c_str(), orig_p, resp_h.c_str(), resp_p);
	Unref($$.string_val);
	$$.string_val = new StringVal(buf);
